if(!is.null(G))
{
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="Before HapMap")
Memory=GAPIT.Memory(Memory=Memory,Infor="Before HapMap")
#Convert HapMap to numerical
print(paste("Converting genotype...",sep=""))
hm=GAPIT.HapMap(G,SNP.effect=SNP.effect,SNP.impute=SNP.impute)
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="after HapMap")
Memory=GAPIT.Memory(Memory=Memory,Infor="after HapMap")
#Extracting SNP for LD plot
if(!is.null(LD.chromosome)){
#print("Extracting SNP for LD plot...")
chromosome=(G[,3]==LD.chromosome[1])
bp=as.numeric(as.vector(G[,4]))
deviation=abs(bp-as.numeric(as.vector(LD.location[1])) )
location=deviation< as.numeric(as.vector(LD.range[1])  )
index=chromosome&location
GLD=G[index,]
}else{
#print("No data in GLD")
GLD=NULL
}
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="HapMap")
Memory=GAPIT.Memory(Memory=Memory,Infor="HapMap")
print(paste("Converting genotype done.",sep=""))
#rm(G)
#gc()
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="G removed")
Memory=GAPIT.Memory(Memory=Memory,Infor="G removed")
GT=hm$GT
GD=hm$GD
GI=hm$GI
rm(hm)
gc()
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="hm removed")
Memory=GAPIT.Memory(Memory=Memory,Infor="hm removed")
}
#From files
if(!byData & byFile){
#print("Loading genotype from files...")
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="byFile")
Memory=GAPIT.Memory(Memory=Memory,Infor="byFile")
numFileUsed=file.to
if(!needKinPC)numFileUsed=file.from
#Initial GI as storage
GD=NULL
GT=NULL
GI=NULL
GLD=NULL
#multiple fragments or files
for (file in file.from:numFileUsed){
frag=1
numSNP=file.fragment
myFRG=NULL
#print(paste("numSNP  before while is ",numSNP))
while(numSNP==file.fragment) {     #this is problematic if the read end at the last line
print(paste("Reading file: ",file,"Fragment: ",frag))
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="Before Fragment")
Memory=GAPIT.Memory(Memory=Memory,Infor="Before Fragment")
myFRG=GAPIT.Fragment( file.path=file.path,file.from=file.from, file.to=file.to,file.total=file.total,file.G=file.G,file.Ext.G=file.Ext.G,
seed=seed,SNP.fraction=SNP.fraction,SNP.effect=SNP.effect,SNP.impute=SNP.impute,genoFormat=genoFormat,
file.GD=file.GD,file.Ext.GD=file.Ext.GD,file.GM=file.GM,file.Ext.GM=file.Ext.GM,
file.fragment=file.fragment,file=file,frag=frag,
LD.chromosome=LD.chromosome,LD.location=LD.location,LD.range=LD.range)
#print(paste("numSNP after while is ",numSNP))
#print(paste("OK with file: ",file,"Fragment: ",frag))
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="After Fragment")
Memory=GAPIT.Memory(Memory=Memory,Infor="After Fragment")
if(is.null(GT) & !is.null(myFRG$GT))GT= as.matrix(myFRG$GT)
if(is.null(GD)){
GD= myFRG$GD
}else{
if(!is.null(myFRG$GD))    {
GD=cbind(GD,myFRG$GD)
}
}
if(is.null(GI)){
GI= myFRG$GI
}else{
if(!is.null(myFRG$GI))    {
colnames(myFRG$GI)=c("SNP","Chromosome","Position")
GI=as.data.frame(rbind(as.matrix(GI),as.matrix(myFRG$GI)))
}
}
if(is.null(G)){
G= myFRG$G
}else{
if(!is.null(myFRG$G))    {
G=as.data.frame(rbind(as.matrix(G),as.matrix(myFRG$G[-1,])))
}
}
if(is.null(GLD)){
GLD= myFRG$GLD
}else{
if(!is.null(myFRG$GLD))    {
if(myFRG$heading){
GLD=as.data.frame(rbind(as.matrix(GLD),as.matrix(myFRG$GLD[-1,])))
}else{
GLD=as.data.frame(rbind(as.matrix(GLD),as.matrix(myFRG$GLD)))
}
}
}
#print("This fragment is joined")
if(file==file.from & frag==1)GT=as.matrix(myFRG$GT)
frag=frag+1
if(!is.null(myFRG$GI))    {
numSNP=myFRG$linesRead[1]
}else{
numSNP=0
}
if(!needKinPC)numSNP=0  #force to end the while loop
if(is.null(myFRG))numSNP=0  #force to end the while loop
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="END this Fragment")
Memory=GAPIT.Memory(Memory=Memory,Infor="END this Fragment")
} #end of repeat on fragment
# print("This file is OK")
} #end of file loop
print("All files loaded")
} #end of if(!byData&byFile)
#print("file loaded")
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="Sampling genotype")
Memory=GAPIT.Memory(Memory=Memory,Infor="Sampling genotype")
#Plot thirt part kinship
if(!is.null(KI) &file.output) {
if(nrow(KI)<1000){
print("Plotting Kinship")
theKin=as.matrix(KI[,-1])
colnames(theKin)=KI[,1]
rownames(theKin)=KI[,1]
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="set kinship")
Memory=GAPIT.Memory(Memory=Memory,Infor="set kinship")
print("Creating heat map for kinship...")
pdf(paste("GAPIT.Kin.thirdPart.pdf",sep=""), width = 12, height = 12)
par(mar = c(25,25,25,25))
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="prepare heatmap")
Memory=GAPIT.Memory(Memory=Memory,Infor="prepare heatmap")
heatmap.2(theKin,  cexRow =.2, cexCol = 0.2, col=rev(heat.colors(256)), scale="none", symkey=FALSE, trace="none")
dev.off()
print("Kinship heat map PDF created!")
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="plot heatmap")
Memory=GAPIT.Memory(Memory=Memory,Infor="plot heatmap")
} #end of if(nrow(KI)<1000)
} #end of if(!is.null(KI))
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="Before SUPER")
Memory=GAPIT.Memory(Memory=Memory,Infor="Before SUPER")
#SUPER
if(!is.null(GP) & kinship.algorithm=="SUPER" & !is.null(bin.size) & !is.null(inclosure.size)){
mySpecify=GAPIT.Specify(GI=GI,GP=GP,bin.size=bin.size,inclosure.size=inclosure.size)
SNP.QTN=mySpecify$index
if(!is.null(GD)){
GK=GD[GTindex,SNP.QTN]
SNPVar=apply(as.matrix(GK),2,var)
GK=GK[,SNPVar>0]
GK=cbind(as.data.frame(GT[GTindex]),as.data.frame(GK)) #add taxa
#print("QTN extracted")
}
}
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="Before creating kinship")
Memory=GAPIT.Memory(Memory=Memory,Infor="Before creating kinship")
#Create kinship from genotype if not provide
if(is.null(KI) & (!is.null(GD) |!is.null(GK)) & kinship.algorithm!="SUPER")
{
print("Calculating kinship...")
if(!is.null(GK)){
thisGD=GK[,-1]
myGT=as.matrix(GK[,1])
print("GK is used to create KI")
}else{
thisGD=GD
myGT=GT
if(!is.null(GTindex)){
thisGD=thisGD[GTindex,]
myGT=myGT[GTindex]
}
}
print(paste("Number of individuals and SNPs are ",nrow(thisGD)," and ",ncol(thisGD)))
if(kinship.algorithm=="EMMA")theKin= emma.kinship(snps=t(as.matrix(.5*thisGD)), method="additive", use="all")
if(kinship.algorithm=="Loiselle")theKin= GAPIT.kinship.loiselle(snps=t(as.matrix(.5*thisGD)), method="additive", use="all")
if(kinship.algorithm=="VanRaden")theKin= GAPIT.kinship.VanRaden(snps=as.matrix(thisGD))
colnames(theKin)=myGT
rownames(theKin)=myGT
print("kinship calculated")
if(length(GT)<1000 &file.output){
#Create heat map for kinship
print("Creating heat map for kinship...")
pdf(paste("GAPIT.Kin.",kinship.algorithm,".pdf",sep=""), width = 12, height = 12)
par(mar = c(25,25,25,25))
heatmap.2(theKin,  cexRow =.2, cexCol = 0.2, col=rev(heat.colors(256)), scale="none", symkey=FALSE, trace="none")
dev.off()
print("Kinship heat map created")
}
print("Adding IDs to kinship...")
#Write the kinship into a text file
KI=cbind(myGT,as.data.frame(theKin)) #This require big memory. Need a way to solve it.
print("Writing kinship to file...")
if(file.output) write.table(KI, paste("GAPIT.Kin.",kinship.algorithm,".csv",sep=""), quote = FALSE, sep = ",", row.names = FALSE,col.names = FALSE)
print("Kinship save as file")
rm(theKin)
gc()
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="Estimating kinship")
Memory=GAPIT.Memory(Memory=Memory,Infor="Estimating kinship")
print("Kinship created!")
}  #end of if(is.null(KI)&!is.null(GD))
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="after creating kinship")
Memory=GAPIT.Memory(Memory=Memory,Infor="after creating kinship")
#Create PC
PC=NULL
if(PCA.total>0){
PC=GAPIT.PCA(X = GD, taxa = GT, PC.number = PCA.total,file.output=file.output)
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="PCA")
Memory=GAPIT.Memory(Memory=Memory,Infor="PCA")
print("PC created")
}
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="Before LD plot")
Memory=GAPIT.Memory(Memory=Memory,Infor="Before LD plot")
#LD plot
#print("LD section")
if(!is.null(GLD) &file.output){
if(nrow(GLD)>500){
GLD=GLD[1,]
print("WARNING: The number of SNPs requested is beyond limitation. No LD plot created.")
}
if(nrow(GLD)>1)
{
print("Plot LD...")
hapmapgeno= data.frame(as.matrix(t(GLD[,-c(1:11)])))
hapmapgeno[hapmapgeno=="NN"]=NA
hapmapgeno[hapmapgeno=="XX"]=NA
hapmapgeno[hapmapgeno=="--"]=NA
hapmapgeno[hapmapgeno=="++"]=NA
hapmapgeno[hapmapgeno=="//"]=NA
LDdist=as.numeric(as.vector(GLD[,4]))
LDsnpName=GLD[,1]
colnames(hapmapgeno)=LDsnpName
#Prune SNM names
#LDsnpName=LDsnpName[GAPIT.Pruning(LDdist,DPP=7)]
LDsnpName=LDsnpName[c(1,length(LDsnpName))] #keep the first and last snp names only
#print(hapmapgeno)
print("Getting genotype object")
LDsnp=makeGenotypes(hapmapgeno,sep="",method=as.genotype)   #This need to be converted to genotype object
print("Caling LDheatmap...")
pdf(paste("GAPIT.LD.chromosom",LD.chromosome,"(",round(max(0,LD.location-LD.range)/1000000),"_",round((LD.location+LD.range)/1000000),"Mb)",".pdf",sep=""), width = 12, height = 12)
#pdf(paste("GAPIT.LD.pdf",sep=""), width = 12, height = 12)
par(mar = c(25,25,25,25))
MyHeatmap <- try(LDheatmap(LDsnp, LDdist, LDmeasure="r", add.map=TRUE,
SNP.name=LDsnpName,color=rev(cm.colors(20)), name="myLDgrob", add.key=TRUE,geneMapLabelY=0.1) )
if(!inherits(MyHeatmap, "try-error")) {
#Modify the plot
grid.edit(gPath("myLDgrob", "Key", "title"), gp=gpar(cex=.5, col="blue"))  #edit key title size and color
grid.edit(gPath("myLDgrob", "geneMap", "title"), gp=gpar(just=c("center","bottom"), cex=0.8, col="black")) #Edit gene map title
grid.edit(gPath("myLDgrob", "geneMap","SNPnames"), gp = gpar(cex=0.3,col="black")) #Edit SNP name
}else{
print("Warning: error in converting genotype. No LD plot!")
}
dev.off()
print("LD heatmap crated")
#grid.edit(gPath("myLDgrob", "heatMap","title"), gp=gpar(cex=1.0))   #Make title smaler
#grid.edit(gPath("myLDgrob", "geneMap", "title"), gp=gpar(just=c("right","bottom"), cex=0.5, col="blue")) #Edit gene map title
#grid.edit(gPath("myLDgrob", "Key", "labels"), gp=gpar(cex=.5, col="black"))  #edit key lable size and color
}else{ # alternative of if(nrow(GLD)>1)
print("Warning: There are less than two SNPs on the region you sepcified. No LD plot!")
} #end of #if(nrow(GLD)>1)
}#end of if(!is.null(GLD))
Timmer=GAPIT.Timmer(Timmer=Timmer,Infor="after LD plot")
Memory=GAPIT.Memory(Memory=Memory,Infor="after LD plot")
#print("Genotype successfully acomplished")
return (list(G=G,GD=GD,GI=GI,GT=GT,hasGenotype=hasGenotype, genoFormat=genoFormat, KI=KI,PC=PC,byFile=byFile,fullGD=fullGD,Timmer=Timmer,Memory=Memory,SNP.QTN=SNP.QTN))
}
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4_data")
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4 data")
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4 data")
myG <- read.delim("Genotype.H4.rf.filter.in.Hapmap.Format.txt", head = FALSE)
View(myG)
myG <- read.delim("Genotype.H4.Hapmap.txt", head = FALSE)
View(myG)
myY <- read.csv("H4_Yield_Data.csv", head = TRUE)
View(myY)
#Take a look at the genoytpic and phenotypic data
myG <- read.delim("Genotype.H4.Hapmap.txt", head = FALSE)
View(myG)
#Take a look at the genoytpic and phenotypic data
myG <- read.delim("Genotype.H6.rf.filter.in.Hapmap.Format.txt", head = FALSE)
myG <- read.delim("Genotype.H6.rf.filter.in.Hapmap.Format.txt", head = FALSE)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4 data")
home.dir <- getwd()
myG <- read.delim("Genotype.H6.rf.filter.in.Hapmap.Format.txt", head = FALSE)
myG <- read.delim("Genotype.H4.rf.filter.conversion.to.Hapmap.txt", head = FALSE)
View(myG)
myG <- read.delim("Genotype.H4.rf.filter.conversion.to.Hapmap.txt", head = FALSE)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4_data")
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4 data")
myG <- read.delim("Genotype.H4.rf.filter.in.Hapmap.Format.txt", head = FALSE)
View(myG)
myY <- read.csv("H4_Yield_Data.csv", head = TRUE)
View(myY)
#Set a seed number - this will ensure that the same folds are being used.
this.seed.number <- sample(-1000000:1000000,1)
myY.for.GS <- myY[,c(1,6)]
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4GS")
home.dir <- getwd()
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("1Results_MainPanicle",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("1Results_MainPanicle",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4GS")
home.dir <- getwd()
#Read in some prerequisite libraries
#install.packages("rrBLUP")
library(rrBLUP)
library('MASS')
library(multtest)
library(gplots)
#Use the "load" function to read in the SNPs. The SNPs are in a data set called "myG"
setwd("Scripts_to_Read_In")
source("k.fold.CV.Function.to.Read.In.v.1.5.R")
#Use the "load" function to read in the SNPs. The SNPs are in a data set called "myG"
setwd("Scripts_Necessary_for_GAPIT")
source("k.fold.CV.Function.to.Read.In.v.1.5.R")
#Use the "load" function to read in the SNPs. The SNPs are in a data set called "myG"
setwd("Scripts_to_Read_In")
source("k.fold.CV.Function.to.Read.In.v.1.5.R")
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4 data")
#Use the "load" function to read in the SNPs. The SNPs are in a data set called "myG"
setwd("Scripts_to_Read_In")
source("k.fold.CV.Function.to.Read.In.v.1.5.R")
source("GAPIT_Code_from_Internet_20120411_Allelic_Effect.R")
setwd(home.dir)
myY.for.GS <- myY[,c(1,6)]
View(myY.for.GS)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4GS")
home.dir <- getwd()
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("1Results_MainPanicle",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("1Results_MainPanicle",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
myY.for.GS <- myY[,c(1,9)]
View(myY.for.GS)
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("1Results_MainHeadSeed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("1Results_MainHeadSeed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H6/H6data")
home.dir <- getwd()
#Take a look at the genoytpic and phenotypic data
myG <- read.delim("Genotype.H6.rf.filter.in.Hapmap.Format.txt", head = FALSE)
View(myG)
myY <- read.csv("H6_all_pheno.csv", head = TRUE)
#Set a seed number - this will ensure that the same folds are being used.
this.seed.number <- sample(-1000000:1000000,1)
myY.for.GS <- myY[,c(1,9)]
View(myY.for.GS)
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("1Results_MainHeadSeed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("1Results_MainHeadSeed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
myY.for.GS <- myY[,c(1,12)]
View(myY.for.GS)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4GS")
home.dir <- getwd()
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("1Results_X1000Seed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("1Results_X1000Seed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
myY.for.GS <- myY[,c(1,5)]
View(myY.for.GS)
myY.for.GS <- myY[,c(1,5)]
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("1Results_yeild",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("1Results_yeild",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
myY.for.GS <- myY[,c(1,9)]
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("1Results_MainHeadSeed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("1Results_MainHeadSeed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
#################
myY.for.GS <- myY[,c(1,13)]
View(myY.for.GS)
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("SalResults_X1000Seed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("SalResults_X1000Seed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4 data")
home.dir <- getwd()
#Read in some prerequisite libraries
#install.packages("rrBLUP")
library(rrBLUP)
library('MASS')
library(multtest)
library(gplots)
#Use the "load" function to read in the SNPs. The SNPs are in a data set called "myG"
setwd("Scripts_to_Read_In")
source("k.fold.CV.Function.to.Read.In.v.1.5.R")
source("GAPIT_Code_from_Internet_20120411_Allelic_Effect.R")
setwd(home.dir)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4_data")
home.dir <- getwd()
#Set a seed number - this will ensure that the same folds are being used.
this.seed.number <- sample(-1000000:1000000,1)
#################
myY.for.GS <- myY[,c(1,13)]
View(myY.for.GS)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4GS")
home.dir <- getwd()
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("SalResults_X1000Seed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("SalResults_X1000Seed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
#############
myY.for.GS <- myY[,c(1,14)]
View(myY.for.GS)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4GS")
home.dir <- getwd()
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("AthResults_X1000Seed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("AthResults_X1000Seed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
myY.for.GS <- myY[,c(1,7)]
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4GS")
home.dir <- getwd()
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("SalResults_MainPanicle",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("SalResults_MainPanicle",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
myY.for.GS <- myY[,c(1,8)]
View(myY.for.GS)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4GS")
home.dir <- getwd()
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("AthResults_MainPanicle",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("AthResults_MainPanicle",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
myY.for.GS <- myY[,c(1,6)]
View(myY.for.GS)
myY.for.GS <- myY[,c(1,5)]
View(myY.for.GS)
View(myY)
myY.for.GS <- myY[,c(1,5)]
View(myY.for.GS)
#####################
myY.for.GS <- myY[,c(1,10)]
View(myY.for.GS)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4GS")
home.dir <- getwd()
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("SalResults_MainHeadSeed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("SalResults_MainHeadSeed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
##################
myY.for.GS <- myY[,c(1,11)]
View(myY.for.GS)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H4/H4GS")
home.dir <- getwd()
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("AthResults_MainHeadSeed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("AthResults_MainHeadSeed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H6/H6data")
home.dir <- getwd()
#Read in some prerequisite libraries
#install.packages("rrBLUP")
library(rrBLUP)
library('MASS')
library(multtest)
library(gplots)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/Scripts_to_Read_In")
source("k.fold.CV.Function.to.Read.In.v.1.5.R")
source("GAPIT_Code_from_Internet_20120411_Allelic_Effect.R")
setwd(home.dir)
#Take a look at the genoytpic and phenotypic data
myG <- read.delim("Genotype.H6.rf.filter.in.Hapmap.Format.txt", head = FALSE)
View(myG)
myY <- read.csv("H6_all_pheno.csv", head = TRUE)
View(myY)
#Set a seed number - this will ensure that the same folds are being used.
this.seed.number <- sample(-1000000:1000000,1)
##############
myY.for.GS <- myY[,c(1,10)]
View(myY.for.GS)
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("SalResults_MainHeadSeed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("SalResults_MainHeadSeed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
##############
myY.for.GS <- myY[,c(1,11)]
View(myY.for.GS)
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("AthResults_MainHeadSeed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("AthResults_MainHeadSeed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H6/H6GS")
home.dir <- getwd()
##############
myY.for.GS <- myY[,c(1,10)]
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("SalResults_MainHeadSeed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("SalResults_MainHeadSeed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
##############
myY.for.GS <- myY[,c(1,11)]
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("AthResults_MainHeadSeed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("AthResults_MainHeadSeed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H6/H6GS")
home.dir <- getwd()
##############
myY.for.GS <- myY[,c(1,7)]
View(myY.for.GS)
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("SalResults_MainPanicle",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("SalResults_MainPanicle",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
##############
myY.for.GS <- myY[,c(1,8)]
View(myY.for.GS)
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("AthResults_MainPanicle",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("AthResults_MainPanicle",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
setwd("/Users/sarahjw2/Box/Widener_Lipka_Shared_Folder/TLI/Genomic_Selection/Initial_Test_Pipeline/H6/H6GS")
home.dir <- getwd()
myY.for.GS <- myY[,c(1,13)]
View(myY.for.GS)
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("SalResults_X1000Seed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("SalResults_X1000Seed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
myY.for.GS <- myY[,c(1,14)]
View(myY.for.GS)
#####Run 5-fold CV on the genome-wide marker set
dir.create(paste("AthResults_X1000Seed",colnames(myY.for.GS)[2],sep = ""))
rrblup.kfoldfoldCV(Y = myY.for.GS, Geno = myG, traitname = colnames(myY.for.GS)[2], path.for.results = paste("AthResults_X1000Seed",colnames(myY.for.GS)[2],"/",sep = ""), number.of.folds = 5, seed.number = this.seed.number)
